{
  "_args": [
    [
      {
        "raw": "passport-custom",
        "scope": null,
        "escapedName": "passport-custom",
        "name": "passport-custom",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/yarivkatz/Development/workspace/lectures/node-pa/10-passport"
    ]
  ],
  "_from": "passport-custom@latest",
  "_id": "passport-custom@1.0.5",
  "_inCache": true,
  "_location": "/passport-custom",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "name": "mbell8903",
    "email": "mbell8903@gmail.com"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-custom",
    "scope": null,
    "escapedName": "passport-custom",
    "name": "passport-custom",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://npm.nerdeez.com/passport-custom/-/passport-custom-1.0.5/2d1d9c174a6a4685bf0289bce61091cd5ec7b0f4.tgz",
  "_shasum": "2d1d9c174a6a4685bf0289bce61091cd5ec7b0f4",
  "_shrinkwrap": null,
  "_spec": "passport-custom",
  "_where": "/Users/yarivkatz/Development/workspace/lectures/node-pa/10-passport",
  "author": {
    "name": "Mike Bell",
    "email": "mbell8903@yahoo.com"
  },
  "bugs": {
    "url": "http://github.com/mbell8903/passport-custom/issues"
  },
  "dependencies": {
    "passport-strategy": "1.x.x"
  },
  "description": "Custom authentication strategy for Passport.",
  "devDependencies": {
    "chai": "^2.1.0",
    "chai-passport-strategy": "0.1.x",
    "mocha": "^2.1.0"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "shasum": "2d1d9c174a6a4685bf0289bce61091cd5ec7b0f4",
    "tarball": "http://npm.nerdeez.com/passport-custom/-/passport-custom-1.0.5/2d1d9c174a6a4685bf0289bce61091cd5ec7b0f4.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "aaae3a9f176c165a1b31fc17b5b51f02d269927e",
  "homepage": "https://github.com/mbell8903/passport-custom",
  "keywords": [
    "passport",
    "custom",
    "auth",
    "authn",
    "authentication"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "maintainers": [
    {
      "name": "mbell8903",
      "email": "mbell8903@gmail.com"
    }
  ],
  "name": "passport-custom",
  "optionalDependencies": {},
  "readme": "# passport-custom\r\n\r\n[![Build](https://travis-ci.org/mbell8903/passport-custom.png)](https://travis-ci.org/mbell8903/passport-custom)\r\n[![Coverage Status](https://coveralls.io/repos/mbell8903/passport-custom/badge.png)](https://coveralls.io/r/mbell8903/passport-custom)\r\n[![Quality](https://codeclimate.com/github/mbell8903/passport-custom.png)](https://codeclimate.com/github/mbell8903/passport-custom)\r\n[![Dependencies](https://david-dm.org/mbell8903/passport-custom.png)](https://david-dm.org/mbell8903/passport-custom)\r\n[![Tips](http://img.shields.io/gittip/mbell8903.png)](https://www.gittip.com/mbell8903/)\r\n\r\n\r\n[Passport](http://passportjs.org/) strategy for authenticating with custom logic.\r\n\r\nThis module lets you authenticate using custom logic in your Node.js\r\napplications. It is based on passport-local module by Jared Hanson.\r\nBy plugging into Passport, custom authentication can be easily and\r\nunobtrusively integrated into any application or framework that supports\r\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\r\n[Express](http://expressjs.com/).\r\n\r\n## Install\r\n\r\n    $ npm install passport-custom\r\n\r\n## Usage\r\n\r\n#### Configure Strategy\r\n\r\nThe custom authentication strategy authenticates users by custom logic of your choosing.\r\nThe strategy requires a `verify` callback, which is where the custom logic goes and calls\r\n`done` providing a user. Note that, req is always passed as the first parameter to the \r\n`verify` callback.\r\n\r\nHere is the pseudo code:\r\n\r\n```\r\npassport.use('strategy-name', new CustomStrategy(\r\n  function(req, callback) {\r\n    // Do your custom user finding logic here, or set to false based on req object\r\n    callback(null, user);\r\n  }\r\n));\r\n```\r\n\r\nAnd a basic example:\r\n\r\n```\r\npassport.use(new CustomStrategy(\r\n  function(req, done) {\r\n    User.findOne({\r\n      username: req.body.username\r\n    }, function (err, user) {\r\n      done(err, user);\r\n    });\r\n  }\r\n));\r\n```\r\n\r\n#### Authenticate Requests\r\n\r\nUse `passport.authenticate()`, specifying the `'custom'` strategy (or whatever you named the strategy upon registration), to\r\nauthenticate requests.\r\n\r\nFor example, as route middleware in an [Express](http://expressjs.com/)\r\napplication:\r\n\r\n```\r\napp.post('/login',\r\n  passport.authenticate('custom', { failureRedirect: '/login' }),\r\n  function(req, res) {\r\n    res.redirect('/');\r\n  }\r\n);\r\n```\r\n\r\n## Tests\r\n\r\n    $ npm install\r\n    $ npm test\r\n\r\n## Credits\r\n\r\n  - [Mike Bell](http://github.com/mbell8903)\r\n\r\n## License\r\n\r\n[The MIT License](http://opensource.org/licenses/MIT)\r\n\r\nCopyright (c) 2014-2015 Mike Bell\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mbell8903/passport-custom.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js"
  },
  "version": "1.0.5"
}
