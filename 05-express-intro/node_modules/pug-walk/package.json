{
  "_args": [
    [
      {
        "raw": "pug-walk@^1.1.7",
        "scope": null,
        "escapedName": "pug-walk",
        "name": "pug-walk",
        "rawSpec": "^1.1.7",
        "spec": ">=1.1.7 <2.0.0",
        "type": "range"
      },
      "/Users/yarivkatz/Development/workspace/lectures/node-pa/05-express-intro/node_modules/pug-filters"
    ]
  ],
  "_from": "pug-walk@>=1.1.7 <2.0.0",
  "_id": "pug-walk@1.1.7",
  "_inCache": true,
  "_location": "/pug-walk",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pug-walk_1.1.7_1520526751485_0.09264111446123025"
  },
  "_npmUser": {
    "name": "forbeslindesay",
    "email": "forbes@lindesay.co.uk"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "pug-walk@^1.1.7",
    "scope": null,
    "escapedName": "pug-walk",
    "name": "pug-walk",
    "rawSpec": "^1.1.7",
    "spec": ">=1.1.7 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pug-filters",
    "/pug-linker",
    "/pug-load"
  ],
  "_resolved": "https://npm.nerdeez.com/pug-walk/-/pug-walk-1.1.7/c00d5c5128bac5806bec15d2b7e7cdabe42531f3.tgz",
  "_shasum": "c00d5c5128bac5806bec15d2b7e7cdabe42531f3",
  "_shrinkwrap": null,
  "_spec": "pug-walk@^1.1.7",
  "_where": "/Users/yarivkatz/Development/workspace/lectures/node-pa/05-express-intro/node_modules/pug-filters",
  "author": {
    "name": "ForbesLindesay"
  },
  "bugs": {
    "url": "https://github.com/pugjs/pug-walk/issues"
  },
  "dependencies": {},
  "description": "Walk and transform a pug AST",
  "devDependencies": {
    "pug-lexer": "^4.0.0",
    "pug-parser": "^5.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c00d5c5128bac5806bec15d2b7e7cdabe42531f3",
    "tarball": "http://npm.nerdeez.com/pug-walk/-/pug-walk-1.1.7/c00d5c5128bac5806bec15d2b7e7cdabe42531f3.tgz",
    "fileCount": 6,
    "unpackedSize": 9242
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/pugjs/pug-walk#readme",
  "keywords": [
    "pug"
  ],
  "license": "MIT",
  "licenseText": "Copyright (c) 2015 Forbes Lindesay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    },
    {
      "name": "timothygu",
      "email": "timothygu99@gmail.com"
    }
  ],
  "name": "pug-walk",
  "optionalDependencies": {},
  "readme": "# pug-walk\n\nWalk and transform a Pug AST\n\n[![Build Status](https://img.shields.io/travis/pugjs/pug-walk/master.svg)](https://travis-ci.org/pugjs/pug-walk)\n[![Dependency Status](https://img.shields.io/david/pugjs/pug-walk.svg)](https://david-dm.org/pugjs/pug-walk)\n[![npm version](https://img.shields.io/npm/v/pug-walk.svg)](https://www.npmjs.org/package/pug-walk)\n[![Coverage Status](https://img.shields.io/codecov/c/github/pugjs/pug-walk/master.svg)](https://codecov.io/gh/pugjs/pug-walk/branch/master)\n\n## Installation\n\n    npm install pug-walk\n\n## Usage\n\n```js\nvar walk = require('pug-walk');\n```\n\n### `walk(ast, before, after, options)`\n\nTraverse and optionally transform a [Pug AST](https://github.com/pugjs/pug-ast-spec).\n\n`ast` is not cloned, so any changes done to it will be done directly on the AST provided.\n\n`before` and `after` are functions with the signature `(node, replace)`. `before` is called when a node is first seen, while `after` is called after the children of the node (if any) have already been traversed.\n\nThe `replace` parameter is a function that can be used to replace the node in the AST. It takes either an object or an array as its only parameter. If an object is specified, the current node is replaced by the parameter in the AST. If an array is specified and the ancestor of the current node allows such an operation, the node is replaced by all of the nodes in the specified array. This way, you can remove and add new nodes adjacent to the current node. Whether the parent node allows array operation is indicated by the property `replace.arrayAllowed`, which is set to true when the parent is a Block and when the parent is a Include and the node is an IncludeFilter.\n\nIf `before` returns `false`, the children of this node will not be traversed and left unchanged (unless `replace` has been called). Otherwise, the returned value of `before` is ignored. The returned value of `after` is always ignored. If `replace()` is called in `before()` with an array, and `before()` does not return `false`, the nodes in the array are still descended.\n\n`options` can contain the following properties:\n\n* `includeDependencies` (boolean): Walk the AST of a loaded dependent file (i.e., includes and extends). Defaults to `false`.\n* `parents` (array<Node>): Nodes that are ancestors to the current `ast`. This option is used mainly internally, and users usually do not have to specify it. Defaults to `[]`.\n\n```js\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\n\n// Changing content of all Text nodes\n// ==================================\n\nvar source = '.my-class foo';\nvar dest = '.my-class bar';\n\nvar ast = parse(lex(source));\n\nast = walk(ast, function before(node, replace) {\n  if (node.type === 'Text') {\n    node.val = 'bar';\n\n    // Alternatively, you can replace the entire node\n    // rather than just the text.\n    // replace({ type: 'Text', val: 'bar', line: node.line });\n  }\n}, {\n  includeDependencies: true\n});\n\nassert.deepEqual(parse(lex(dest)), ast);\n\n// Convert all simple <strong> elements to text\n// ============================================\n\nvar source = 'p abc #[strong NO]\\nstrong on its own line';\nvar dest = 'p abc #[| NO]\\n| on its own line';\n\nvar ast = parse(lex(source));\n\nast = walk(ast, function before(node, replace) {\n  // Find all <strong> tags\n  if (node.type === 'Tag' && node.name === 'strong') {\n    var children = node.block.nodes;\n\n    // Make sure that the Tag only has one child -- the text\n    if (children.length === 1 && children[0].type === 'Text') {\n      // Replace the Tag with the Text\n      replace({ type: 'Text', val: children[0].val, line: node.line });\n    }\n  }\n}, {\n  includeDependencies: true\n});\n\nassert.deepEqual(parse(lex(dest)), ast);\n\n// Flatten blocks\n// ==============\n\nvar ast = {\n  type: 'Block',\n  nodes: [\n    { type: 'Text', val: 'a' },\n    {\n      type: 'Block',\n      nodes: [\n        { type: 'Text', val: 'b' },\n        {\n          type: 'Block',\n          nodes: [ { type: 'Text', val: 'c' } ]\n        },\n        { type: 'Text', val: 'd' }\n      ]\n    },\n    { type: 'Text', val: 'e' }\n  ]\n};\n\nvar dest = {\n  type: 'Block',\n  nodes: [\n    { type: 'Text', val: 'a' },\n    { type: 'Text', val: 'b' },\n    { type: 'Text', val: 'c' },\n    { type: 'Text', val: 'd' },\n    { type: 'Text', val: 'e' }\n  ]\n};\n\n// We need to use `after` handler instead of `before`\n// handler because we want to flatten the innermost\n// blocks first before proceeding onto outer blocks.\n\nast = walk(ast, null, function after(node, replace) {\n  if (node.type === 'Block' && replace.arrayAllowed) {\n    // Replace the block with its contents\n    replace(node.nodes);\n  }\n});\n\nassert.deepEqual(dest, ast);\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pugjs/pug-walk.git"
  },
  "version": "1.1.7"
}
